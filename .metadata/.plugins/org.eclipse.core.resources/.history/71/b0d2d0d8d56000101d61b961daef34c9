package com.example.nagoyameshi.controller;

import jakarta.servlet.http.HttpServletRequest;

import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.example.nagoyameshi.security.UserDetailsImpl;
import com.example.nagoyameshi.service.StripeService;

import lombok.RequiredArgsConstructor;


@Controller
@RequiredArgsConstructor
public class SubscriptionController {

    private final StripeService stripeService;

    @GetMapping("/subscription")
    public String showSubscriptionPage(HttpServletRequest request, Model model) {
        String sessionId = stripeService.createStripeSession(request);

        if (sessionId == null || sessionId.isEmpty()) {
            model.addAttribute("errorMessage", "Stripeセッションの作成に失敗しました。");
            return "premium/error";
        }

        model.addAttribute("sessionId", sessionId);
        return "premium/register";
    }

    @GetMapping("/subscription/success")
    public String subscriptionSuccess(
            @AuthenticationPrincipal UserDetailsImpl loginUser,
            HttpServletRequest request) {

        stripeService.handleSuccess(request, loginUser.getUser());
        
        @GetMapping("/subscription/success")
        public String subscriptionSuccess(
                @AuthenticationPrincipal UserDetailsImpl loginUser,
                HttpServletRequest request) {

            // ユーザー情報を更新（DBに保存）
            stripeService.handleSuccess(request, loginUser.getUser());

            // セッションの認証情報を更新（ロールが追加されたことを反映）
            Authentication currentAuth = SecurityContextHolder.getContext().getAuthentication();

            // ロールを再構築
            User updatedUser = loginUser.getUser(); // DB更新後のユーザー
            List<GrantedAuthority> updatedAuthorities = updatedUser.getRoles().stream()
                .map(role -> new SimpleGrantedAuthority("ROLE_" + role.getName()))
                .collect(Collectors.toList());

            // 新しい認証情報を作成してセット
            Authentication newAuth = new UsernamePasswordAuthenticationToken(
                loginUser, currentAuth.getCredentials(), updatedAuthorities);

            SecurityContextHolder.getContext().setAuthentication(newAuth);

            return "premium/success";
        }

        return "premium/success";
    }

    @GetMapping("/subscription/portal")
    public String redirectToStripePortal(@AuthenticationPrincipal UserDetailsImpl loginUser) {
        String customerId = loginUser.getUser().getStripeCustomerId();

        if (customerId == null || customerId.isEmpty()) {
            return "premium/error";
        }

        String returnUrl = "http://localhost:8080/subscription/edit";
        String portalUrl = stripeService.createCustomerPortalSession(customerId, returnUrl);

        return "redirect:" + portalUrl;
    }

    @GetMapping("/subscription/cancel")
    public String subscriptionCancel() {
        return "premium/cancel";
    }

    @GetMapping("/subscription/cancellation")
    public String showCancelPage() {
        return "premium/cancellation";
    }

    @PostMapping("/subscription/cancellation")
    public String cancelSubscription(@AuthenticationPrincipal UserDetailsImpl loginUser) {
        stripeService.cancelSubscription(loginUser.getUser());
        return "premium/cancel";
    }

    @GetMapping("/subscription/edit")
    public String showEditCompletePage() {
        return "premium/edit";
    }

    @GetMapping("/subscription/manage")
    public String showManagePage() {
        return "premium/manage";
    }
}
